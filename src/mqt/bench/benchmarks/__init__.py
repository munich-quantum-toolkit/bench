# Copyright (c) 2023 - 2025 Chair for Design Automation, TUM
# Copyright (c) 2025 Munich Quantum Software Company GmbH
# All rights reserved.
#
# SPDX-License-Identifier: MIT
#
# Licensed under the MIT License

"""Initialization of the benchmark module."""

from __future__ import annotations

import importlib
import importlib.resources as ir
from functools import cache
from typing import TYPE_CHECKING, Any, cast

from . import _registry as benchmark_registry

if TYPE_CHECKING:
    from pathlib import Path

    from qiskit.circuit import QuantumCircuit

_pkg_name = __name__
for entry in ir.files(_pkg_name).iterdir():
    path = cast("Path", entry)
    if path.suffix == ".py" and path.stem not in {"__init__", "_registry"}:
        importlib.import_module(f"{_pkg_name}.{path.stem}")

__all__ = [
    "benchmark_registry",
    "create_circuit",
    "get_available_benchmark_names",
    "get_available_benchmarks",
]


@cache
def get_available_benchmarks() -> dict[str, benchmark_registry._BenchmarkFactory]:
    """Return a dict of available benchmarks."""
    return benchmark_registry.all_benchmarks()


@cache
def get_available_benchmark_names() -> list[str]:
    """Return a list of available benchmark names."""
    return benchmark_registry.benchmark_names()


# ruff: noqa: ANN401
def create_circuit(benchmark_name: str, /, *args: Any, **kwargs: Any) -> QuantumCircuit:
    """Creates and returns a quantum circuit based on the specified benchmark name and additional arguments.

    The function retrieves the associated factory for the given
    benchmark name and uses it to construct the quantum circuit. If the benchmark
    name is not found, a ValueError is raised with the list of available benchmarks.

    Args:
        benchmark_name: The name of the benchmark to create the circuit for.
        *args: Positional arguments to be passed to the benchmark's factory method.
        **kwargs: Keyword arguments to be passed to the benchmark's factory method.

    Returns:
        QuantumCircuit: A quantum circuit generated by the factory associated with
        the given benchmark name.

    Raises:
        ValueError: If the specified benchmark name is not in the list of available
        benchmarks.
    """
    try:
        factory = get_available_benchmarks()[benchmark_name]
        return factory(*args, **kwargs)
    except KeyError:
        msg = f"Unknown benchmark '{benchmark_name}'. Available benchmarks: {get_available_benchmark_names()}"
        raise ValueError(msg) from None
