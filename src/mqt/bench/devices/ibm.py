# Copyright (c) 2023 - 2025 Chair for Design Automation, TUM
# Copyright (c) 2025 Munich Quantum Software Company GmbH
# All rights reserved.
#
# SPDX-License-Identifier: MIT
#
# Licensed under the MIT License

"""Module to manage IBM devices."""

from __future__ import annotations

import logging
from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from qiskit.transpiler import Target

from qiskit.providers.fake_provider import GenericBackendV2
from qiskit.transpiler import CouplingMap

logger = logging.getLogger(__name__)


def get_ibm_target(device_name: str) -> Target:
    """Get the target device for a given name."""
    if device_name == "ibm_montreal":
        return get_ibm_montreal_target()
    if device_name == "ibm_torino":
        return get_ibm_torino_target()
    if device_name == "ibm_washington":
        return get_ibm_washington_target()
    msg = f"Unknown IBM device: {device_name}"
    raise ValueError(msg)


def get_ibm_montreal_target() -> Target:
    """Get the target device for IBM Montreal."""
    montreal_edges = [
        [0, 1],
        [1, 0],
        [1, 2],
        [1, 4],
        [2, 1],
        [2, 3],
        [3, 2],
        [3, 5],
        [4, 1],
        [4, 7],
        [5, 3],
        [5, 8],
        [6, 7],
        [7, 4],
        [7, 6],
        [7, 10],
        [8, 5],
        [8, 9],
        [8, 11],
        [9, 8],
        [10, 7],
        [10, 12],
        [11, 8],
        [11, 14],
        [12, 10],
        [12, 13],
        [12, 15],
        [13, 12],
        [13, 14],
        [14, 11],
        [14, 13],
        [14, 16],
        [15, 12],
        [15, 18],
        [16, 14],
        [16, 19],
        [17, 18],
        [18, 15],
        [18, 17],
        [18, 21],
        [19, 16],
        [19, 20],
        [19, 22],
        [20, 19],
        [21, 18],
        [21, 23],
        [22, 19],
        [22, 25],
        [23, 21],
        [23, 24],
        [24, 23],
        [24, 25],
        [25, 22],
        [25, 24],
        [25, 26],
        [26, 25],
    ]

    montreal_coupling = CouplingMap(montreal_edges)
    montreal_mock = GenericBackendV2(
        num_qubits=27, coupling_map=montreal_coupling, basis_gates=["sx", "rz", "x", "cx", "measure"]
    )
    target = montreal_mock.target
    target.description = "ibm_montreal"
    return target


def get_ibm_torino_target() -> Target:
    """Get the target device for IBM Torino."""
    torino_edges = [
        [0, 1],
        [0, 15],
        [1, 0],
        [1, 2],
        [2, 1],
        [2, 3],
        [3, 2],
        [3, 4],
        [4, 3],
        [4, 5],
        [4, 16],
        [5, 4],
        [5, 6],
        [6, 5],
        [6, 7],
        [7, 6],
        [7, 8],
        [8, 7],
        [8, 9],
        [8, 17],
        [9, 8],
        [9, 10],
        [10, 9],
        [10, 11],
        [11, 10],
        [11, 12],
        [12, 11],
        [12, 13],
        [12, 18],
        [13, 12],
        [13, 14],
        [14, 13],
        [15, 0],
        [15, 19],
        [16, 4],
        [16, 23],
        [17, 8],
        [17, 27],
        [18, 12],
        [18, 31],
        [19, 15],
        [19, 20],
        [20, 19],
        [20, 21],
        [21, 20],
        [21, 22],
        [21, 34],
        [22, 21],
        [22, 23],
        [23, 16],
        [23, 22],
        [23, 24],
        [24, 23],
        [24, 25],
        [25, 24],
        [25, 26],
        [25, 35],
        [26, 25],
        [26, 27],
        [27, 17],
        [27, 26],
        [27, 28],
        [28, 27],
        [28, 29],
        [29, 28],
        [29, 30],
        [29, 36],
        [30, 29],
        [30, 31],
        [31, 18],
        [31, 30],
        [31, 32],
        [32, 31],
        [32, 33],
        [33, 32],
        [33, 37],
        [34, 21],
        [34, 40],
        [35, 25],
        [35, 44],
        [36, 29],
        [36, 48],
        [37, 33],
        [37, 52],
        [38, 39],
        [38, 53],
        [39, 38],
        [39, 40],
        [40, 34],
        [40, 39],
        [40, 41],
        [41, 40],
        [41, 42],
        [42, 41],
        [42, 43],
        [42, 54],
        [43, 42],
        [43, 44],
        [44, 35],
        [44, 43],
        [44, 45],
        [45, 44],
        [45, 46],
        [46, 45],
        [46, 47],
        [46, 55],
        [47, 46],
        [47, 48],
        [48, 36],
        [48, 47],
        [48, 49],
        [49, 48],
        [49, 50],
        [50, 49],
        [50, 51],
        [50, 56],
        [51, 50],
        [51, 52],
        [52, 37],
        [52, 51],
        [53, 38],
        [53, 57],
        [54, 42],
        [54, 61],
        [55, 46],
        [55, 65],
        [56, 50],
        [56, 69],
        [57, 53],
        [57, 58],
        [58, 57],
        [58, 59],
        [59, 58],
        [59, 60],
        [59, 72],
        [60, 59],
        [60, 61],
        [61, 54],
        [61, 60],
        [61, 62],
        [62, 61],
        [62, 63],
        [63, 62],
        [63, 64],
        [63, 73],
        [64, 63],
        [64, 65],
        [65, 55],
        [65, 64],
        [65, 66],
        [66, 65],
        [66, 67],
        [67, 66],
        [67, 68],
        [67, 74],
        [68, 67],
        [68, 69],
        [69, 56],
        [69, 68],
        [69, 70],
        [70, 69],
        [70, 71],
        [71, 70],
        [71, 75],
        [72, 59],
        [72, 78],
        [73, 63],
        [73, 82],
        [74, 67],
        [74, 86],
        [75, 71],
        [75, 90],
        [76, 77],
        [76, 91],
        [77, 76],
        [77, 78],
        [78, 72],
        [78, 77],
        [78, 79],
        [79, 78],
        [79, 80],
        [80, 79],
        [80, 81],
        [80, 92],
        [81, 80],
        [81, 82],
        [82, 73],
        [82, 81],
        [82, 83],
        [83, 82],
        [83, 84],
        [84, 83],
        [84, 85],
        [84, 93],
        [85, 84],
        [85, 86],
        [86, 74],
        [86, 85],
        [86, 87],
        [87, 86],
        [87, 88],
        [88, 87],
        [88, 89],
        [88, 94],
        [89, 88],
        [89, 90],
        [90, 75],
        [90, 89],
        [91, 76],
        [91, 95],
        [92, 80],
        [92, 99],
        [93, 84],
        [93, 103],
        [94, 88],
        [94, 107],
        [95, 91],
        [95, 96],
        [96, 95],
        [96, 97],
        [97, 96],
        [97, 98],
        [97, 110],
        [98, 97],
        [98, 99],
        [99, 92],
        [99, 98],
        [99, 100],
        [100, 99],
        [100, 101],
        [101, 100],
        [101, 102],
        [101, 111],
        [102, 101],
        [102, 103],
        [103, 93],
        [103, 102],
        [103, 104],
        [104, 103],
        [104, 105],
        [105, 104],
        [105, 106],
        [105, 112],
        [106, 105],
        [106, 107],
        [107, 94],
        [107, 106],
        [107, 108],
        [108, 107],
        [108, 109],
        [109, 108],
        [109, 113],
        [110, 97],
        [110, 116],
        [111, 101],
        [111, 120],
        [112, 105],
        [112, 124],
        [113, 109],
        [113, 128],
        [114, 115],
        [114, 129],
        [115, 114],
        [115, 116],
        [116, 110],
        [116, 115],
        [116, 117],
        [117, 116],
        [117, 118],
        [118, 117],
        [118, 119],
        [118, 130],
        [119, 118],
        [119, 120],
        [120, 111],
        [120, 119],
        [120, 121],
        [121, 120],
        [121, 122],
        [122, 121],
        [122, 123],
        [122, 131],
        [123, 122],
        [123, 124],
        [124, 112],
        [124, 123],
        [124, 125],
        [125, 124],
        [125, 126],
        [126, 125],
        [126, 127],
        [126, 132],
        [127, 126],
        [127, 128],
        [128, 113],
        [128, 127],
        [129, 114],
        [130, 118],
        [131, 122],
        [132, 126],
    ]

    torino_coupling = CouplingMap(torino_edges)
    torino_mock = GenericBackendV2(
        num_qubits=133, coupling_map=torino_coupling, basis_gates=["sx", "rz", "cz", "x", "measure"]
    )
    target = torino_mock.target
    target.description = "ibm_torino"
    return target


def get_ibm_washington_target() -> Target:
    """Get the target device for IBM Washington."""
    washington_edges = [
        [0, 1],
        [0, 14],
        [1, 0],
        [1, 2],
        [2, 1],
        [2, 3],
        [3, 2],
        [3, 4],
        [4, 3],
        [4, 5],
        [4, 15],
        [5, 4],
        [5, 6],
        [6, 5],
        [6, 7],
        [7, 6],
        [7, 8],
        [8, 7],
        [8, 16],
        [9, 10],
        [10, 9],
        [10, 11],
        [11, 10],
        [11, 12],
        [12, 11],
        [12, 13],
        [12, 17],
        [13, 12],
        [14, 0],
        [14, 18],
        [15, 4],
        [15, 22],
        [16, 8],
        [16, 26],
        [17, 12],
        [17, 30],
        [18, 14],
        [18, 19],
        [19, 18],
        [19, 20],
        [20, 19],
        [20, 21],
        [20, 33],
        [21, 20],
        [21, 22],
        [22, 15],
        [22, 21],
        [22, 23],
        [23, 22],
        [23, 24],
        [24, 23],
        [24, 25],
        [24, 34],
        [25, 24],
        [25, 26],
        [26, 16],
        [26, 25],
        [26, 27],
        [27, 26],
        [27, 28],
        [28, 27],
        [28, 29],
        [28, 35],
        [29, 28],
        [29, 30],
        [30, 17],
        [30, 29],
        [30, 31],
        [31, 30],
        [31, 32],
        [32, 31],
        [32, 36],
        [33, 20],
        [33, 39],
        [34, 24],
        [34, 43],
        [35, 28],
        [35, 47],
        [36, 32],
        [36, 51],
        [37, 38],
        [37, 52],
        [38, 37],
        [38, 39],
        [39, 33],
        [39, 38],
        [39, 40],
        [40, 39],
        [40, 41],
        [41, 40],
        [41, 42],
        [41, 53],
        [42, 41],
        [42, 43],
        [43, 34],
        [43, 42],
        [43, 44],
        [44, 43],
        [44, 45],
        [45, 44],
        [45, 46],
        [45, 54],
        [46, 45],
        [46, 47],
        [47, 35],
        [47, 46],
        [47, 48],
        [48, 47],
        [48, 49],
        [49, 48],
        [49, 50],
        [49, 55],
        [50, 49],
        [50, 51],
        [51, 36],
        [51, 50],
        [52, 37],
        [52, 56],
        [53, 41],
        [53, 60],
        [54, 45],
        [54, 64],
        [55, 49],
        [55, 68],
        [56, 52],
        [56, 57],
        [57, 56],
        [57, 58],
        [58, 57],
        [58, 59],
        [58, 71],
        [59, 58],
        [59, 60],
        [60, 53],
        [60, 59],
        [60, 61],
        [61, 60],
        [61, 62],
        [62, 61],
        [62, 63],
        [62, 72],
        [63, 62],
        [63, 64],
        [64, 54],
        [64, 63],
        [64, 65],
        [65, 64],
        [65, 66],
        [66, 65],
        [66, 67],
        [66, 73],
        [67, 66],
        [67, 68],
        [68, 55],
        [68, 67],
        [68, 69],
        [69, 68],
        [69, 70],
        [70, 69],
        [70, 74],
        [71, 58],
        [71, 77],
        [72, 62],
        [72, 81],
        [73, 66],
        [73, 85],
        [74, 70],
        [74, 89],
        [75, 76],
        [75, 90],
        [76, 75],
        [76, 77],
        [77, 71],
        [77, 76],
        [77, 78],
        [78, 77],
        [78, 79],
        [79, 78],
        [79, 80],
        [79, 91],
        [80, 79],
        [80, 81],
        [81, 72],
        [81, 80],
        [81, 82],
        [82, 81],
        [82, 83],
        [83, 82],
        [83, 84],
        [83, 92],
        [84, 83],
        [84, 85],
        [85, 73],
        [85, 84],
        [85, 86],
        [86, 85],
        [86, 87],
        [87, 86],
        [87, 88],
        [87, 93],
        [88, 87],
        [88, 89],
        [89, 74],
        [89, 88],
        [90, 75],
        [90, 94],
        [91, 79],
        [91, 98],
        [92, 83],
        [92, 102],
        [93, 87],
        [93, 106],
        [94, 90],
        [94, 95],
        [95, 94],
        [95, 96],
        [96, 95],
        [96, 97],
        [96, 109],
        [97, 96],
        [97, 98],
        [98, 91],
        [98, 97],
        [98, 99],
        [99, 98],
        [99, 100],
        [100, 99],
        [100, 101],
        [100, 110],
        [101, 100],
        [101, 102],
        [102, 92],
        [102, 101],
        [102, 103],
        [103, 102],
        [103, 104],
        [104, 103],
        [104, 105],
        [104, 111],
        [105, 104],
        [105, 106],
        [106, 93],
        [106, 105],
        [106, 107],
        [107, 106],
        [107, 108],
        [108, 107],
        [108, 112],
        [109, 96],
        [110, 100],
        [110, 118],
        [111, 104],
        [111, 122],
        [112, 108],
        [112, 126],
        [113, 114],
        [114, 113],
        [114, 115],
        [115, 114],
        [115, 116],
        [116, 115],
        [116, 117],
        [117, 116],
        [117, 118],
        [118, 110],
        [118, 117],
        [118, 119],
        [119, 118],
        [119, 120],
        [120, 119],
        [120, 121],
        [121, 120],
        [121, 122],
        [122, 111],
        [122, 121],
        [122, 123],
        [123, 122],
        [123, 124],
        [124, 123],
        [124, 125],
        [125, 124],
        [125, 126],
        [126, 112],
        [126, 125],
    ]

    washington_coupling = CouplingMap(washington_edges)
    washington_mock = GenericBackendV2(
        num_qubits=127, coupling_map=washington_coupling, basis_gates=["sx", "rz", "x", "cx", "measure"]
    )
    target = washington_mock.target
    target.description = "ibm_washington"
    return target
